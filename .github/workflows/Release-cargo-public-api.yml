name: Release cargo-public-api
permissions:
  contents: none # Minimal default permissions

on:
  workflow_call: # From .github/workflows/Release-all.yml
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    uses: ./.github/workflows/CI.yml

  publish:
    needs: ci
    environment:
      name: crates.io
      url: https://crates.io/crates/cargo-public-api
    runs-on: ubuntu-latest
    permissions:
      contents: write # git push + access to secrets.CARGO_REGISTRY_TOKEN
    steps:
      - uses: actions/checkout@v4

      # Figure out what tag to use
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path cargo-public-api/Cargo.toml | jq --raw-output .version)
          echo "GIT_TAG=v${version}" >> $GITHUB_OUTPUT

      # Try to cargo publish cargo-public-api. If this succeeds we will tag the
      # release. This is because we don't want to have a situation where a
      # version exists at crates.io but not as a git tag.
      - run: cargo publish -p cargo-public-api
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Push the tag to git.
      - name: push tag
        run: |
          git tag ${{ steps.version.outputs.GIT_TAG }}
          git push origin ${{ steps.version.outputs.GIT_TAG }}

  release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write # So we can create a release.
    steps:
      - uses: actions/checkout@v4
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path cargo-public-api/Cargo.toml | jq --raw-output .version)
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          echo "GIT_TAG=v${version}" >> $GITHUB_OUTPUT
      - run: cargo install parse-changelog@0.6.4 --locked
      - name: create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          notes="$(parse-changelog CHANGELOG.md ${{ steps.version.outputs.VERSION }})"
          title="${{ steps.version.outputs.GIT_TAG }}"
          gh release create --title "$title" --notes "$notes" ${{ steps.version.outputs.GIT_TAG }}
