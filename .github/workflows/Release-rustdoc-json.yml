name: Release rustdoc-json
permissions:
  contents: none # Minimal default permissions

on:
  workflow_call: # From .github/workflows/Release-all.yml
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1 # https://github.com/Enselic/snapshot-testing#force-colors-in-ci

jobs:
  ci:
    permissions:
      contents: read # For actions/checkout@v4 in CI.yml
    uses: ./.github/workflows/CI.yml

  release:
    needs: ci
    environment:
      name: crates.io
      url: https://crates.io/crates/rustdoc-json
    runs-on: ubuntu-latest
    permissions:
      contents: write # git push
      id-token: write # https://crates.io/docs/trusted-publishing
    steps:
      - uses: actions/checkout@v4
      - uses: rust-lang/crates-io-auth-action@v1
        id: auth

      # Figure out what tag to use
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path rustdoc-json/Cargo.toml | jq --raw-output .version)
          echo "GIT_TAG=rustdoc-json-v${version}" >> $GITHUB_OUTPUT

      # Try to cargo publish rustdoc-json. If this succeeds we will tag the
      # release. This is because we don't want to have a situation where a
      # version exists at crates.io but not as a git tag.
      - run: cargo publish -p rustdoc-json
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

      # Push the tag to git.
      - name: push tag
        run: |
          git tag ${{ steps.version.outputs.GIT_TAG }}
          git push origin ${{ steps.version.outputs.GIT_TAG }}

      # Do not create a GitHub release. That is only done for public-api and
      # cargo-public-api. A git tag is sufficient for rustdoc-json.
