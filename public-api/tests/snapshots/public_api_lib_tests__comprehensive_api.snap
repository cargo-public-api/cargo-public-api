---
source: public-api/tests/public-api-lib-tests.rs
expression: api
---
pub mod comprehensive_api
pub extern crate comprehensive_api::example_api
pub use comprehensive_api::<<example_api::*>>
pub use comprehensive_api::StructV2
pub use comprehensive_api::my_i32
pub use comprehensive_api::u32
pub mod comprehensive_api::attributes
#[non_exhaustive] pub enum comprehensive_api::attributes::NonExhaustive
pub comprehensive_api::attributes::NonExhaustive::MoreToCome
#[repr(C)] pub struct comprehensive_api::attributes::C
pub comprehensive_api::attributes::C::b: bool
pub struct comprehensive_api::attributes::ReprRust
pub comprehensive_api::attributes::ReprRust::b: bool
#[no_mangle] #[link_section = ".custom"] pub static comprehensive_api::attributes::NO_MANGLE_WITH_CUSTOM_LINK_SECTION: usize
#[export_name = "something_arbitrary"] pub fn comprehensive_api::attributes::export_name()
pub fn comprehensive_api::attributes::must_use() -> usize
pub mod comprehensive_api::constants
pub const comprehensive_api::constants::CONST_BOOL: bool
pub const comprehensive_api::constants::CONST_F64: f64
pub const comprehensive_api::constants::CONST_FN: fn(usize)
pub const comprehensive_api::constants::CONST_I32_ARRAY: [i32; 3]
pub const comprehensive_api::constants::CONST_I32_F64_TUPLE: (i32, f64)
pub const comprehensive_api::constants::CONST_OPTION_I32: core::option::Option<i32>
pub const comprehensive_api::constants::CONST_PLAIN_STRUCT: comprehensive_api::structs::Plain
pub const comprehensive_api::constants::CONST_STR: &str
pub const comprehensive_api::constants::CONST_USIZE: usize
pub mod comprehensive_api::enums
pub enum comprehensive_api::enums::DiverseVariants
pub comprehensive_api::enums::DiverseVariants::Recursive
pub comprehensive_api::enums::DiverseVariants::Recursive::child: alloc::boxed::Box<comprehensive_api::enums::DiverseVariants>
pub comprehensive_api::enums::DiverseVariants::Simple
pub comprehensive_api::enums::DiverseVariants::Struct
pub comprehensive_api::enums::DiverseVariants::Struct::x: usize
pub comprehensive_api::enums::DiverseVariants::Struct::y: comprehensive_api::enums::SingleVariant
pub comprehensive_api::enums::DiverseVariants::Tuple(usize, bool)
pub enum comprehensive_api::enums::EnumWithExplicitDiscriminants
pub comprehensive_api::enums::EnumWithExplicitDiscriminants::First = 1
pub comprehensive_api::enums::EnumWithExplicitDiscriminants::Second = 2
pub comprehensive_api::enums::EnumWithExplicitDiscriminants::TenPlusTen = 20
pub enum comprehensive_api::enums::EnumWithGenerics<'a, T, D: core::fmt::Debug> where T: core::fmt::Display
pub comprehensive_api::enums::EnumWithGenerics::Variant
pub comprehensive_api::enums::EnumWithGenerics::Variant::d: D
pub comprehensive_api::enums::EnumWithGenerics::Variant::t: &'a T
pub enum comprehensive_api::enums::EnumWithStrippedTupleVariants
pub comprehensive_api::enums::EnumWithStrippedTupleVariants::Double(bool, bool)
pub comprehensive_api::enums::EnumWithStrippedTupleVariants::DoubleFirstHidden(_, bool)
pub comprehensive_api::enums::EnumWithStrippedTupleVariants::DoubleSecondHidden(bool, _)
pub comprehensive_api::enums::EnumWithStrippedTupleVariants::Single(usize)
pub comprehensive_api::enums::EnumWithStrippedTupleVariants::SingleHidden(_)
pub enum comprehensive_api::enums::SingleVariant
pub comprehensive_api::enums::SingleVariant::Variant
#[repr(u8)] pub enum comprehensive_api::enums::SingleVariantReprC
pub comprehensive_api::enums::SingleVariantReprC::Variant
pub mod comprehensive_api::exports
pub mod comprehensive_api::exports::issue_145
pub mod comprehensive_api::exports::issue_145::external
pub struct comprehensive_api::exports::issue_145::external::External
pub mod comprehensive_api::exports::issue_145::external_2
pub struct comprehensive_api::exports::issue_145::external_2::External
pub mod comprehensive_api::exports::issue_145::external_3
pub struct comprehensive_api::exports::issue_145::external_3::External
pub mod comprehensive_api::exports::issue_145::publicly_renamed
pub struct comprehensive_api::exports::issue_145::publicly_renamed::External
pub struct comprehensive_api::exports::issue_145::PubliclyRenamedFromPrivateMod
pub fn comprehensive_api::exports::issue_145::external_arg_type(_transform: comprehensive_api::exports::issue_145::external::External)
pub fn comprehensive_api::exports::issue_145::external_external_arg_type(_transform: comprehensive_api::exports::issue_145::external::External)
pub fn comprehensive_api::exports::issue_145::privately_renamed_2_arg_type(_transform: comprehensive_api::exports::issue_145::external_2::External)
pub fn comprehensive_api::exports::issue_145::privately_renamed_arg_type(_transform: comprehensive_api::exports::issue_145::external::External)
pub fn comprehensive_api::exports::issue_145::privately_renamed_external_arg_type(_transform: comprehensive_api::exports::issue_145::external::External)
pub fn comprehensive_api::exports::issue_145::publicly_renamed_external(_transform: comprehensive_api::exports::issue_145::external_2::External)
pub fn comprehensive_api::exports::issue_145::publicly_renamed_from_private_mod_arg_type(_transform: comprehensive_api::exports::issue_145::external_3::External)
pub mod comprehensive_api::exports::issue_410
pub mod comprehensive_api::exports::issue_410::container
pub mod comprehensive_api::exports::issue_410::container::super_glob
pub use comprehensive_api::exports::issue_410::container::super_glob::<<super::*>>
pub mod comprehensive_api::exports::issue_410::super_glob
pub mod comprehensive_api::exports::issue_410::super_glob::<<super_glob>>
pub mod comprehensive_api::exports::recursion_1
pub mod comprehensive_api::exports::recursion_1::recursion_2
pub use comprehensive_api::exports::recursion_1::recursion_2::recursion_1
pub mod comprehensive_api::exports::recursion_2
pub mod comprehensive_api::exports::recursion_2::recursion_1
pub use comprehensive_api::exports::recursion_2::recursion_1::recursion_2
pub mod comprehensive_api::exports::recursion_glob_1
pub use comprehensive_api::exports::recursion_glob_1::<<super::recursion_glob_1::*>>
pub mod comprehensive_api::exports::recursion_glob_2
pub use comprehensive_api::exports::recursion_glob_2::<<super::recursion_glob_2::*>>
pub mod comprehensive_api::exports::v0
pub fn comprehensive_api::exports::v0::foo()
pub mod comprehensive_api::exports::v1
pub fn comprehensive_api::exports::v1::foo()
pub fn comprehensive_api::exports::v1::foo2()
pub mod comprehensive_api::functions
pub async fn comprehensive_api::functions::async_fn()
pub async fn comprehensive_api::functions::async_fn_ret_bool() -> bool
pub const fn comprehensive_api::functions::const_fn()
pub fn comprehensive_api::functions::dyn_arg_one_trait(d: &dyn std::io::Write)
pub fn comprehensive_api::functions::dyn_arg_one_trait_one_lifetime(d: &(dyn std::io::Write + 'static))
pub fn comprehensive_api::functions::dyn_arg_two_traits(d: &(dyn std::io::Write + core::marker::Send))
pub fn comprehensive_api::functions::dyn_arg_two_traits_one_lifetime(d: &(dyn std::io::Write + core::marker::Send + 'static))
pub fn comprehensive_api::functions::fn_arg(f: impl core::ops::function::Fn(bool, comprehensive_api::structs::Plain) -> bool, f_mut: impl core::ops::function::FnMut())
pub fn comprehensive_api::functions::generic_arg<T>(t: T) -> T
pub fn comprehensive_api::functions::generic_bound<T: core::marker::Sized>(t: T) -> T
pub fn comprehensive_api::functions::impl_multiple<T>(t: impl comprehensive_api::traits::Simple + core::convert::AsRef<T>) -> impl comprehensive_api::traits::Simple
pub fn comprehensive_api::functions::inferred_lifetime(foo: &usize) -> usize
pub fn comprehensive_api::functions::multiple_bounds<T>(t: T) where T: core::fmt::Debug + core::fmt::Display
pub fn comprehensive_api::functions::multiple_bounds_inline<T: core::fmt::Debug + core::fmt::Display>(t: T)
pub fn comprehensive_api::functions::one_arg(x: usize)
pub fn comprehensive_api::functions::outlives<'a, 'b: 'a, 'c: 'b + 'a>(x: &'a bool, y: &'b i128, z: &'c comprehensive_api::structs::TupleStructSingle) -> usize
pub fn comprehensive_api::functions::plain()
pub fn comprehensive_api::functions::return_array() -> [u8; 2]
pub fn comprehensive_api::functions::return_iterator() -> impl core::iter::traits::iterator::Iterator<Item = u32>
pub fn comprehensive_api::functions::return_mut_raw_pointer(input: &mut usize) -> *mut usize
pub fn comprehensive_api::functions::return_raw_pointer(input: &usize) -> *const usize
pub fn comprehensive_api::functions::return_slice<'a>(input: &'a [usize]) -> &'a [usize]
pub fn comprehensive_api::functions::return_tuple() -> (bool, comprehensive_api::unions::Basic)
pub fn comprehensive_api::functions::somewhere<T, U>(t: T, u: U) where T: core::fmt::Display, U: core::fmt::Debug
pub fn comprehensive_api::functions::struct_arg(s: comprehensive_api::structs::PrivateField)
pub fn comprehensive_api::functions::synthetic_arg(t: impl comprehensive_api::traits::Simple) -> impl comprehensive_api::traits::Simple
pub fn comprehensive_api::functions::synthetic_use_capture<'a, 'b, T>(x: &'a (), y: T) -> impl core::marker::Sized + use<'a, T>
pub fn comprehensive_api::functions::synthetic_use_no_capture<'a>(x: &'a usize) -> impl core::marker::Sized + use<>
pub unsafe fn comprehensive_api::functions::unsafe_fn()
pub fn comprehensive_api::functions::unused_argument(_: u32)
pub mod comprehensive_api::higher_ranked_trait_bounds
pub struct comprehensive_api::higher_ranked_trait_bounds::Bar<'a>
pub comprehensive_api::higher_ranked_trait_bounds::Bar::bar: &'a (dyn for<'b> comprehensive_api::higher_ranked_trait_bounds::Trait<'b> + core::marker::Unpin)
pub comprehensive_api::higher_ranked_trait_bounds::Bar::baz: &'a (dyn core::marker::Unpin + for<'b> comprehensive_api::higher_ranked_trait_bounds::Trait<'b>)
pub struct comprehensive_api::higher_ranked_trait_bounds::Foo<'a>
pub comprehensive_api::higher_ranked_trait_bounds::Foo::some_func: for<'c> fn(val: &'c i32) -> i32
pub comprehensive_api::higher_ranked_trait_bounds::Foo::some_trait: &'a dyn for<'b> comprehensive_api::higher_ranked_trait_bounds::Trait<'b>
impl<'a> comprehensive_api::higher_ranked_trait_bounds::Foo<'a>
pub fn comprehensive_api::higher_ranked_trait_bounds::Foo<'a>::bar<T>() where T: comprehensive_api::higher_ranked_trait_bounds::Trait<'a>
pub trait comprehensive_api::higher_ranked_trait_bounds::B<'x>
impl<'a> comprehensive_api::higher_ranked_trait_bounds::B<'a> for dyn for<'b> comprehensive_api::higher_ranked_trait_bounds::Trait<'b>
pub trait comprehensive_api::higher_ranked_trait_bounds::Trait<'x>
pub fn comprehensive_api::higher_ranked_trait_bounds::test1<T>() where for<'a> &'a T: core::iter::traits::iterator::Iterator
pub fn comprehensive_api::higher_ranked_trait_bounds::test2<T>() where for<'a, 'b> &'a T: comprehensive_api::higher_ranked_trait_bounds::Trait<'b>
pub fn comprehensive_api::higher_ranked_trait_bounds::test3<F>() where F: for<'a, 'b> core::ops::function::Fn(&'a u8, &'b u8)
pub mod comprehensive_api::impls
pub mod comprehensive_api::impls::issue_429
pub struct comprehensive_api::impls::issue_429::Handle<T>(_)
impl comprehensive_api::impls::issue_429::Handle<u32>
pub fn comprehensive_api::impls::issue_429::Handle<u32>::get_u32() -> u32
pub type comprehensive_api::impls::issue_429::HU32 = comprehensive_api::impls::issue_429::Handle<u32>
pub struct comprehensive_api::impls::GatTestStruct1<'a, T>(_)
impl<'a, T> comprehensive_api::traits::Simple for comprehensive_api::impls::GatTestStruct1<'a, T>
pub fn comprehensive_api::impls::GatTestStruct1<'a, T>::act()
pub struct comprehensive_api::impls::GatTestStruct2<T>(_)
pub struct comprehensive_api::impls::TestItemGrouping
impl comprehensive_api::traits::TraitReferencingOwnAssociatedType for comprehensive_api::impls::TestItemGrouping
pub type comprehensive_api::impls::TestItemGrouping::OwnAssociatedType = bool
pub fn comprehensive_api::impls::TestItemGrouping::own_associated_type_output(&self) -> Self::OwnAssociatedType
pub fn comprehensive_api::impls::TestItemGrouping::own_associated_type_output_explicit_as(&self) -> <Self as comprehensive_api::traits::TraitReferencingOwnAssociatedType>::OwnAssociatedType
impl<T, U> comprehensive_api::traits::TraitWithGenerics<T, U> for comprehensive_api::impls::TestItemGrouping
pub type comprehensive_api::impls::TestItemGrouping::Foo = u8
pub fn comprehensive_api::impls::TestItemGrouping::bar() -> <Self as comprehensive_api::traits::TraitWithGenerics<T, U>>::Foo
pub trait comprehensive_api::impls::ForUnit
pub fn comprehensive_api::impls::ForUnit::for_unit()
impl comprehensive_api::impls::ForUnit for ()
pub fn ()::for_unit()
pub mod comprehensive_api::macros
pub mod comprehensive_api::statics
pub static comprehensive_api::statics::ANSWER: i8
pub static comprehensive_api::statics::FUNCTION_POINTER: core::option::Option<fn(usize, i8) -> alloc::string::String>
pub mut static comprehensive_api::statics::MUT_ANSWER: i8
pub mod comprehensive_api::structs
pub struct comprehensive_api::structs::ConstArg<T, const N: usize>
pub comprehensive_api::structs::ConstArg::items: [T; N]
pub struct comprehensive_api::structs::OnlyConstArg<const N: usize>
pub struct comprehensive_api::structs::Plain
pub comprehensive_api::structs::Plain::x: usize
impl comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::f()
pub fn comprehensive_api::structs::Plain::new() -> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s1(self)
pub fn comprehensive_api::structs::Plain::s2(&self)
pub fn comprehensive_api::structs::Plain::s3(&mut self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s4(&'a self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s5(&'a self)
pub struct comprehensive_api::structs::PrivateField
pub struct comprehensive_api::structs::TupleStructDouble(pub usize, pub bool)
pub struct comprehensive_api::structs::TupleStructDoubleWithHidden(_, pub bool)
pub struct comprehensive_api::structs::TupleStructDoubleWithPrivate(_, pub bool)
pub struct comprehensive_api::structs::TupleStructSingle(pub usize)
pub struct comprehensive_api::structs::Unit
impl comprehensive_api::traits::GenericAssociatedTypes for comprehensive_api::structs::Unit
pub type comprehensive_api::structs::Unit::SimpleBound = comprehensive_api::impls::GatTestStruct1<'static, usize>
pub type comprehensive_api::structs::Unit::WhereSelfSized = comprehensive_api::structs::Unit
pub type comprehensive_api::structs::Unit::WhereSimple<T: comprehensive_api::traits::Simple> = comprehensive_api::impls::GatTestStruct2<T>
pub type comprehensive_api::structs::Unit::WithLifetime<'a> = comprehensive_api::impls::GatTestStruct1<'a, bool>
impl comprehensive_api::traits::Simple for comprehensive_api::structs::Unit
pub fn comprehensive_api::structs::Unit::act()
pub struct comprehensive_api::structs::WithLifetimeAndGenericParam<'a, T>
pub comprehensive_api::structs::WithLifetimeAndGenericParam::t: T
pub comprehensive_api::structs::WithLifetimeAndGenericParam::unit_ref: &'a comprehensive_api::structs::Unit
impl<'b, 'z> comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String> where 'b: 'z + 'static
pub fn comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String>::with_two_lifetime_bounds(unit_ref: &'z comprehensive_api::structs::Unit, t: alloc::string::String)
impl<'b, T> comprehensive_api::structs::WithLifetimeAndGenericParam<'b, T>
pub fn comprehensive_api::structs::WithLifetimeAndGenericParam<'b, T>::new_any(unit_ref: &'b comprehensive_api::structs::Unit, t: T) -> Self
impl<'b, T> comprehensive_api::structs::WithLifetimeAndGenericParam<'b, T>
pub fn comprehensive_api::structs::WithLifetimeAndGenericParam<'b, T>::new_any_duplicate(unit_ref: &'b comprehensive_api::structs::Unit, t: T) -> Self
impl<'b> comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String> where 'b: 'static
pub fn comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String>::new_with_lifetime_bound(unit_ref: &'b comprehensive_api::structs::Unit, t: alloc::string::String) -> Self
impl<'b> comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String>
pub fn comprehensive_api::structs::WithLifetimeAndGenericParam<'b, alloc::string::String>::new(unit_ref: &'b comprehensive_api::structs::Unit, t: alloc::string::String) -> Self
pub struct comprehensive_api::structs::WithTraitBounds<T: core::fmt::Display + core::fmt::Debug>
pub mod comprehensive_api::traits
pub trait comprehensive_api::traits::AssociatedConst
pub const comprehensive_api::traits::AssociatedConst::CONST: bool
pub trait comprehensive_api::traits::AssociatedConstDefault
pub const comprehensive_api::traits::AssociatedConstDefault::CONST_WITH_DEFAULT: bool
pub trait comprehensive_api::traits::AssociatedType
pub type comprehensive_api::traits::AssociatedType::Type
pub trait comprehensive_api::traits::Empty
pub trait comprehensive_api::traits::GenericAssociatedTypes
pub type comprehensive_api::traits::GenericAssociatedTypes::SimpleBound: comprehensive_api::traits::Simple
pub type comprehensive_api::traits::GenericAssociatedTypes::WhereSelfSized where Self: core::marker::Sized
pub type comprehensive_api::traits::GenericAssociatedTypes::WhereSimple<T> where T: comprehensive_api::traits::Simple
pub type comprehensive_api::traits::GenericAssociatedTypes::WithLifetime<'a>
impl comprehensive_api::traits::GenericAssociatedTypes for comprehensive_api::structs::Unit
pub type comprehensive_api::structs::Unit::SimpleBound = comprehensive_api::impls::GatTestStruct1<'static, usize>
pub type comprehensive_api::structs::Unit::WhereSelfSized = comprehensive_api::structs::Unit
pub type comprehensive_api::structs::Unit::WhereSimple<T: comprehensive_api::traits::Simple> = comprehensive_api::impls::GatTestStruct2<T>
pub type comprehensive_api::structs::Unit::WithLifetime<'a> = comprehensive_api::impls::GatTestStruct1<'a, bool>
pub trait comprehensive_api::traits::Simple
pub fn comprehensive_api::traits::Simple::act()
impl comprehensive_api::traits::Simple for comprehensive_api::structs::Unit
pub fn comprehensive_api::structs::Unit::act()
impl<'a, T> comprehensive_api::traits::Simple for comprehensive_api::impls::GatTestStruct1<'a, T>
pub fn comprehensive_api::impls::GatTestStruct1<'a, T>::act()
pub trait comprehensive_api::traits::TraitReferencingOwnAssociatedType
pub type comprehensive_api::traits::TraitReferencingOwnAssociatedType::OwnAssociatedType
pub fn comprehensive_api::traits::TraitReferencingOwnAssociatedType::own_associated_type_output(&self) -> Self::OwnAssociatedType
pub fn comprehensive_api::traits::TraitReferencingOwnAssociatedType::own_associated_type_output_explicit_as(&self) -> <Self as comprehensive_api::traits::TraitReferencingOwnAssociatedType>::OwnAssociatedType
impl comprehensive_api::traits::TraitReferencingOwnAssociatedType for comprehensive_api::impls::TestItemGrouping
pub type comprehensive_api::impls::TestItemGrouping::OwnAssociatedType = bool
pub fn comprehensive_api::impls::TestItemGrouping::own_associated_type_output(&self) -> Self::OwnAssociatedType
pub fn comprehensive_api::impls::TestItemGrouping::own_associated_type_output_explicit_as(&self) -> <Self as comprehensive_api::traits::TraitReferencingOwnAssociatedType>::OwnAssociatedType
pub trait comprehensive_api::traits::TraitWithBounds: comprehensive_api::traits::private_mod::PubTraitInPrivateMod + comprehensive_api::traits::Simple + core::marker::Send
pub trait comprehensive_api::traits::TraitWithBoundsAndGenerics<U>: comprehensive_api::traits::Simple
pub trait comprehensive_api::traits::TraitWithGenerics<T, U>
pub type comprehensive_api::traits::TraitWithGenerics::Foo
pub fn comprehensive_api::traits::TraitWithGenerics::bar() -> <Self as comprehensive_api::traits::TraitWithGenerics<T, U>>::Foo
impl<T, U> comprehensive_api::traits::TraitWithGenerics<T, U> for comprehensive_api::impls::TestItemGrouping
pub type comprehensive_api::impls::TestItemGrouping::Foo = u8
pub fn comprehensive_api::impls::TestItemGrouping::bar() -> <Self as comprehensive_api::traits::TraitWithGenerics<T, U>>::Foo
pub unsafe trait comprehensive_api::traits::UnsafeTrait
pub mod comprehensive_api::typedefs
pub type comprehensive_api::typedefs::ConstArg120 = comprehensive_api::structs::OnlyConstArg<120>
pub type comprehensive_api::typedefs::RedefinedResult<T, E> = core::result::Result<T, E>
pub type comprehensive_api::typedefs::TypedefPlain = comprehensive_api::structs::Plain
pub mod comprehensive_api::unions
pub union comprehensive_api::unions::Basic
pub comprehensive_api::unions::Basic::x: usize
pub comprehensive_api::unions::Basic::y: usize
pub macro comprehensive_api::simple_macro!
pub struct comprehensive_api::Plain
pub comprehensive_api::Plain::x: usize
impl comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::f()
pub fn comprehensive_api::structs::Plain::new() -> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s1(self)
pub fn comprehensive_api::structs::Plain::s2(&self)
pub fn comprehensive_api::structs::Plain::s3(&mut self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s4(&'a self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s5(&'a self)
pub struct comprehensive_api::RenamedPlain
pub comprehensive_api::RenamedPlain::x: usize
impl comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::f()
pub fn comprehensive_api::structs::Plain::new() -> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s1(self)
pub fn comprehensive_api::structs::Plain::s2(&self)
pub fn comprehensive_api::structs::Plain::s3(&mut self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s4(&'a self)
impl<'a> comprehensive_api::structs::Plain
pub fn comprehensive_api::structs::Plain::s5(&'a self)
pub struct comprehensive_api::StructInPrivateMod
